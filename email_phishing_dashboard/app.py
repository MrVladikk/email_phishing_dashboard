
import streamlit as st # Streamlit –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
import pandas as pd # pandas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
import plotly.express as px # plotly –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
from io import BytesIO # BytesIO –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel

# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data

def load_base_data(path):  # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –∫ CSV
    df = pd.read_csv(path) # —á–∏—Ç–∞–µ–º CSV –∏ —Å–æ–∑–¥–∞—ë–º DataFrame
    return df # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame

# –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.set_page_config(page_title="Phishing Dashboard", layout="wide") # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
    st.title("Phishing Dashboard ‚Äî –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è email") # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö –ø–∏—Å–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º.") # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º

    base_data = load_base_data("email_phishing_data.csv")  # –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    uploaded = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –Ω–æ–≤—ã–º–∏ –ø–∏—Å—å–º–∞–º–∏", type=["csv"]) # –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–π–ª-–∞–ø–ª–æ—É–¥–µ—Ä –≤ —Å–∞–π–¥–±–∞—Ä–µ
    if uploaded:
        new_data = pd.read_csv(uploaded) # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —á–∏—Ç–∞–µ–º –µ–≥–æ
        st.sidebar.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_data)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º") # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        data = pd.concat([base_data, new_data], ignore_index=True) # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    else:
        data = base_data # –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –±–∞–∑–æ–π

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞
    with st.sidebar.expander("üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º", expanded=True):
        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–∏—Å—å–º–∞ (–º–µ—Ç–∫–∞)
        labels = st.multiselect(
            "–¢–∏–ø –ø–∏—Å—å–º–∞:", [0, 1], [0, 1],
            format_func=lambda x: "–õ–µ–≥–∏—Ç–∏–º–Ω–æ–µ" if x == 0 else "–§–∏—à–∏–Ω–≥"
        ) # –≤—ã–±–µ—Ä–∏—Ç–µ 0 –∏–ª–∏ 1

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
        min_w, max_w = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:",
            int(data.num_words.min()), int(data.num_words.max()),
            (int(data.num_words.min()), int(data.num_words.max()))
        )  # –∑–∞–¥–∞—ë–º –¥–∏–∞–ø–∞–∑–æ–Ω

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
        min_uw, max_uw = st.slider(
            "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:",
            int(data.num_unique_words.min()), int(data.num_unique_words.max()),
            (int(data.num_unique_words.min()), int(data.num_unique_words.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º
        min_sw, max_sw = st.slider(
            "–°—Ç–æ–ø-—Å–ª–æ–≤–∞:",
            int(data.num_stopwords.min()), int(data.num_stopwords.max()),
            (int(data.num_stopwords.min()), int(data.num_stopwords.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ø-—Å–ª–æ–≤

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Å—ã–ª–∫–∞–º
        min_links, max_links = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:",
            int(data.num_links.min()), int(data.num_links.max()),
            (int(data.num_links.min()), int(data.num_links.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Å—ã–ª–æ–∫

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–∞–º
        min_ud, max_ud = st.slider(
            "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã:",
            int(data.num_unique_domains.min()), int(data.num_unique_domains.max()),
            (int(data.num_unique_domains.min()), int(data.num_unique_domains.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–º–µ–Ω–æ–≤

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ email-–∞–¥—Ä–µ—Å–∞–º –≤–Ω—É—Ç—Ä–∏ –ø–∏—Å—å–º–∞
        min_ea, max_ea = st.slider(
            "Email-–∞–¥—Ä–µ—Å–∞:",
            int(data.num_email_addresses.min()), int(data.num_email_addresses.max()),
            (int(data.num_email_addresses.min()), int(data.num_email_addresses.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω –∞–¥—Ä–µ—Å–æ–≤

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –æ—à–∏–±–∫–∞–º
        min_err, max_err = st.slider(
            "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:",
            int(data.num_spelling_errors.min()), int(data.num_spelling_errors.max()),
            (int(data.num_spelling_errors.min()), int(data.num_spelling_errors.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω –æ—à–∏–±–æ–∫

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–æ—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        min_uk, max_uk = st.slider(
            "–°—Ä–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞:",
            int(data.num_urgent_keywords.min()), int(data.num_urgent_keywords.max()),
            (int(data.num_urgent_keywords.min()), int(data.num_urgent_keywords.max()))
        )  # –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤

    # –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ DataFrame
    filtered = data[
        (data.label.isin(labels)) &
        (data.num_words.between(min_w, max_w)) &
        (data.num_unique_words.between(min_uw, max_uw)) &
        (data.num_stopwords.between(min_sw, max_sw)) &
        (data.num_links.between(min_links, max_links)) &
        (data.num_unique_domains.between(min_ud, max_ud)) &
        (data.num_email_addresses.between(min_ea, max_ea)) &
        (data.num_spelling_errors.between(min_err, max_err)) &
        (data.num_urgent_keywords.between(min_uk, max_uk))
    ]  # –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total = len(filtered) # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞
    phishing_count = filtered.label.sum() # —Å–∫–æ–ª—å–∫–æ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö
    avg_words = filtered.num_words.mean() # —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Å–ª–æ–≤

    col1, col2, col3 = st.columns(3) # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
    col1.metric("–í—Å–µ–≥–æ –ø–∏—Å–µ–º", total)  # –æ–±—â–µ–µ —á–∏—Å–ª–æ
    col2.metric("–§–∏—à–∏–Ω–≥", phishing_count)  # —á–∏—Å–ª–æ —Ñ–∏—à–∏–Ω–≥–∞
    col3.metric("–°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤", f"{avg_words:.1f}")  # —Å—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤

    # —Å–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã
    tab1, tab2 = st.tabs(["–ì—Ä–∞—Ñ–∏–∫", "–¢–∞–±–ª–∏—Ü–∞"])  # –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏
    with tab1:
        # –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ —Ç–∏–ø—É –ø–∏—Å—å–º–∞")
        fig = px.histogram(
            filtered,
            x="num_words",
            color=filtered.label.map({0: "Legit", 1: "Phishing"}),
            barmode="overlay",
            nbins=40,
            labels={"num_words": "–ß–∏—Å–ª–æ —Å–ª–æ–≤", "label": "–¢–∏–ø"},
            color_discrete_map={"Legit": "green", "Phishing": "red"}
        )  # —Å–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
        fig.update_traces(opacity=0.7)  # –∑–∞–¥–∞—ë–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        st.plotly_chart(fig, use_container_width=True)  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫

    with tab2:
        # —Ç–∞–±–ª–∏—Ü–∞ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø–∏—Å–µ–º")
        st.dataframe(filtered.reset_index(drop=True))  # –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É

    # –∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")  # —Ä–∞–∑–¥–µ–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
    def to_excel(df):  # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DataFrame –≤ Excel
        out = BytesIO()  # —Å–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä
        df.to_excel(out, index=False, sheet_name="filtered")  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        return out.getvalue()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã

    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å .xlsx",
        data=to_excel(filtered),
        file_name="filtered_emails.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )  # –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

# –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é